package com.gav.semanticGoogleSheets;

/*Generated by MPS */

import org.d0sl.machine.SemanticModelFactory;
import org.d0sl.model.SemanticModel;
import org.d0sl.model.Use;
import org.d0sl.model.DomainSpecificModel;
import org.d0sl.model.Typedef;
import org.d0sl.model.FunctionDef;
import org.d0sl.model.expression.ExpressionType;
import org.d0sl.model.ArgumentDef;
import org.d0sl.model.PredicateDef;
import org.d0sl.model.expression.And;
import org.d0sl.model.FunctionCall;
import org.d0sl.model.ArgumentRef;
import org.d0sl.model.expression.StringTerm;
import org.d0sl.model.expression.StringConstant;
import org.d0sl.model.VariableRef;
import org.d0sl.model.VariableDef;
import org.d0sl.model.expression.NumericTerm;
import org.d0sl.model.expression.NumericConstant;
import org.d0sl.model.expression.Implication;
import org.d0sl.model.expression.Comparison;
import org.d0sl.model.PredicateCall;
import org.d0sl.model.expression.Not;
import org.d0sl.model.expression.Parentheses;
import org.d0sl.model.expression.Or;
import org.d0sl.model.expression.ForAll;
import org.d0sl.model.expression.RangeRef;
import org.d0sl.model.expression.Range;
import org.d0sl.machine.LocalSemanticRegistry;
import org.d0sl.machine.ModelDescriptor;
import org.d0sl.machine.LocalSemanticMachine;
import org.d0sl.machine.PredicateDescriptor;
import org.d0sl.machine.SemanticException;

public class main implements SemanticModelFactory {
    private static String name;
    private static SemanticModel model;

    static {
        name = "SemanticGoogleSheets";
        model = new SemanticModel(name);
        // Building SemanticModel
        addUsages(model);
        addVariables(model);
        addRules(model);
        addPredicates(model);
        System.out.println(model);
    }

    public static String getName() {
        return name;
    }
    public static SemanticModel getModel() {
        return model;
    }

    /**
     * Adds all "use" declarations to Semantic Model
     */
    public static void addUsages(SemanticModel model) {
        model.getUses().add(use_a0_2());
        model.getUses().add(use_b0());
        model.getUses().add(use_c0());
    }

    public static Use use_a0_2() {
        Use use = new Use();
        use.setModelName("SemanticGoogleSheetsDSL");
        use.setClassName("com.gav.semanticGoogleSheets.SemanticGoogleSheetsDSL");
        use.setDomainModel(new DomainSpecificModel("SemanticGoogleSheetsDSL") {
            {
                getTypedefs().add(new Typedef("Row"));
                getFunctions().add(new FunctionDef("SemanticGoogleSheetsDSL", "get range", null) {
                    {
                        String functionName = "get range";
                        setResultType(ExpressionType.LIST);
                        addArgument(new ArgumentDef("SemanticGoogleSheetsDSL", functionName, "range") {
                            {
                                setArgumentType(ExpressionType.STRING_CONSTANT);
                            }
                        });
                    }

                });
                getFunctions().add(new FunctionDef("SemanticGoogleSheetsDSL", "get row elements", null) {
                    {
                        String functionName = "get row elements";
                        setResultType(ExpressionType.LIST);
                        addArgument(new ArgumentDef("SemanticGoogleSheetsDSL", functionName, "row") {
                            {
                                setTypeReference("Row");
                                setArgumentType(ExpressionType.BASE_OBJECT);
                            }
                        });
                    }

                });
                getFunctions().add(new FunctionDef("SemanticGoogleSheetsDSL", "get row elements as semanticArrayList", null) {
                    {
                        String functionName = "get row elements as semanticArrayList";
                        setResultType(ExpressionType.BASE_OBJECT);
                        setTypeReference("");
                        addArgument(new ArgumentDef("SemanticGoogleSheetsDSL", functionName, "row") {
                            {
                                setTypeReference("Row");
                                setArgumentType(ExpressionType.BASE_OBJECT);
                            }
                        });
                    }

                });
                getFunctions().add(new FunctionDef("SemanticGoogleSheetsDSL", "say", null) {
                    {
                        String functionName = "say";
                        setResultType(ExpressionType.LOGICAL_CONSTANT);
                        addArgument(new ArgumentDef("SemanticGoogleSheetsDSL", functionName, "msg") {
                            {
                                setArgumentType(ExpressionType.STRING_CONSTANT);
                            }
                        });
                    }

                });
                getFunctions().add(new FunctionDef("SemanticGoogleSheetsDSL", "get range as list of lists", null) {
                    {
                        String functionName = "get range as list of lists";
                        setResultType(ExpressionType.LIST);
                        addArgument(new ArgumentDef("SemanticGoogleSheetsDSL", functionName, "range") {
                            {
                                setArgumentType(ExpressionType.STRING_CONSTANT);
                            }
                        });
                    }

                });
                getFunctions().add(new FunctionDef("SemanticGoogleSheetsDSL", "create range", null) {
                    {
                        String functionName = "create range";
                        setResultType(ExpressionType.LIST);
                        addArgument(new ArgumentDef("SemanticGoogleSheetsDSL", functionName, "rowCount") {
                            {
                                setArgumentType(ExpressionType.NUMERIC_CONSTANT);
                            }
                        });
                    }

                });
                getFunctions().add(new FunctionDef("SemanticGoogleSheetsDSL", "create row", null) {
                    {
                        String functionName = "create row";
                        setResultType(ExpressionType.LIST);
                        addArgument(new ArgumentDef("SemanticGoogleSheetsDSL", functionName, "colCount") {
                            {
                                setArgumentType(ExpressionType.NUMERIC_CONSTANT);
                            }
                        });
                    }

                });
                getFunctions().add(new FunctionDef("SemanticGoogleSheetsDSL", "write table", null) {
                    {
                        String functionName = "write table";
                        setResultType(ExpressionType.LOGICAL_CONSTANT);
                        addArgument(new ArgumentDef("SemanticGoogleSheetsDSL", functionName, "sheetRange") {
                            {
                                setArgumentType(ExpressionType.STRING_CONSTANT);
                            }
                        });
                        addArgument(new ArgumentDef("SemanticGoogleSheetsDSL", functionName, "list") {
                            {
                                setArgumentType(ExpressionType.LIST);
                            }
                        });
                    }

                });
                getFunctions().add(new FunctionDef("SemanticGoogleSheetsDSL", "calculate mean mark", null) {
                    {
                        String functionName = "calculate mean mark";
                        setResultType(ExpressionType.NUMERIC_CONSTANT);
                        addArgument(new ArgumentDef("SemanticGoogleSheetsDSL", functionName, "mark") {
                            {
                                setArgumentType(ExpressionType.NUMERIC_CONSTANT);
                            }
                        });
                        addArgument(new ArgumentDef("SemanticGoogleSheetsDSL", functionName, "mark sum") {
                            {
                                setArgumentType(ExpressionType.NUMERIC_CONSTANT);
                            }
                        });
                        addArgument(new ArgumentDef("SemanticGoogleSheetsDSL", functionName, "mark count") {
                            {
                                setArgumentType(ExpressionType.NUMERIC_CONSTANT);
                            }
                        });
                    }

                });
                getFunctions().add(new FunctionDef("SemanticGoogleSheetsDSL", "plus", null) {
                    {
                        String functionName = "plus";
                        setResultType(ExpressionType.NUMERIC_CONSTANT);
                        addArgument(new ArgumentDef("SemanticGoogleSheetsDSL", functionName, "val1") {
                            {
                                setArgumentType(ExpressionType.STRING_CONSTANT);
                            }
                        });
                        addArgument(new ArgumentDef("SemanticGoogleSheetsDSL", functionName, "val2") {
                            {
                                setArgumentType(ExpressionType.NUMERIC_CONSTANT);
                            }
                        });
                    }

                });
                getFunctions().add(new FunctionDef("SemanticGoogleSheetsDSL", "start", null) {
                    {
                        String functionName = "start";
                        setResultType(ExpressionType.LOGICAL_CONSTANT);
                        addArgument(new ArgumentDef("SemanticGoogleSheetsDSL", functionName, "spreadsheetId") {
                            {
                                setArgumentType(ExpressionType.STRING_CONSTANT);
                            }
                        });
                        addArgument(new ArgumentDef("SemanticGoogleSheetsDSL", functionName, "credFilePath") {
                            {
                                setArgumentType(ExpressionType.STRING_CONSTANT);
                            }
                        });
                    }

                });
            }
        });
        return use;
    }
    public static Use use_b0() {
        Use use = new Use();
        use.setModelName("ArrayListDSL");
        use.setClassName("com.gav.semanticGoogleSheets.ArrayListDSL");
        use.setDomainModel(new DomainSpecificModel("ArrayListDSL") {
            {
                getTypedefs().add(new Typedef("SemanticArrayList"));
                getFunctions().add(new FunctionDef("ArrayListDSL", "init string arrayList", null) {
                    {
                        String functionName = "init string arrayList";
                        setResultType(ExpressionType.BASE_OBJECT);
                        setTypeReference("");
                    }

                });
                getFunctions().add(new FunctionDef("ArrayListDSL", "init numeric arrayList", null) {
                    {
                        String functionName = "init numeric arrayList";
                        setResultType(ExpressionType.BASE_OBJECT);
                        setTypeReference("");
                    }

                });
                getFunctions().add(new FunctionDef("ArrayListDSL", "get string", null) {
                    {
                        String functionName = "get string";
                        setResultType(ExpressionType.STRING_CONSTANT);
                        addArgument(new ArgumentDef("ArrayListDSL", functionName, "arrayList") {
                            {
                                setTypeReference("SemanticArrayList");
                                setArgumentType(ExpressionType.BASE_OBJECT);
                            }
                        });
                        addArgument(new ArgumentDef("ArrayListDSL", functionName, "index") {
                            {
                                setArgumentType(ExpressionType.NUMERIC_CONSTANT);
                            }
                        });
                    }

                });
                getFunctions().add(new FunctionDef("ArrayListDSL", "get numeric", null) {
                    {
                        String functionName = "get numeric";
                        setResultType(ExpressionType.NUMERIC_CONSTANT);
                        addArgument(new ArgumentDef("ArrayListDSL", functionName, "arrayList") {
                            {
                                setTypeReference("SemanticArrayList");
                                setArgumentType(ExpressionType.BASE_OBJECT);
                            }
                        });
                        addArgument(new ArgumentDef("ArrayListDSL", functionName, "index") {
                            {
                                setArgumentType(ExpressionType.NUMERIC_CONSTANT);
                            }
                        });
                    }

                });
                getFunctions().add(new FunctionDef("ArrayListDSL", "addString", null) {
                    {
                        String functionName = "addString";
                        setResultType(ExpressionType.LOGICAL_CONSTANT);
                        addArgument(new ArgumentDef("ArrayListDSL", functionName, "arrayList") {
                            {
                                setTypeReference("SemanticArrayList");
                                setArgumentType(ExpressionType.BASE_OBJECT);
                            }
                        });
                        addArgument(new ArgumentDef("ArrayListDSL", functionName, "val") {
                            {
                                setArgumentType(ExpressionType.STRING_CONSTANT);
                            }
                        });
                    }

                });
                getFunctions().add(new FunctionDef("ArrayListDSL", "addNumeric", null) {
                    {
                        String functionName = "addNumeric";
                        setResultType(ExpressionType.LOGICAL_CONSTANT);
                        addArgument(new ArgumentDef("ArrayListDSL", functionName, "arrayList") {
                            {
                                setTypeReference("SemanticArrayList");
                                setArgumentType(ExpressionType.BASE_OBJECT);
                            }
                        });
                        addArgument(new ArgumentDef("ArrayListDSL", functionName, "val") {
                            {
                                setArgumentType(ExpressionType.NUMERIC_CONSTANT);
                            }
                        });
                    }

                });
                getFunctions().add(new FunctionDef("ArrayListDSL", "addList", null) {
                    {
                        String functionName = "addList";
                        setResultType(ExpressionType.LOGICAL_CONSTANT);
                        addArgument(new ArgumentDef("ArrayListDSL", functionName, "arrayList") {
                            {
                                setArgumentType(ExpressionType.LIST);
                            }
                        });
                        addArgument(new ArgumentDef("ArrayListDSL", functionName, "list") {
                            {
                                setArgumentType(ExpressionType.LIST);
                            }
                        });
                    }

                });
                getFunctions().add(new FunctionDef("ArrayListDSL", "set value", null) {
                    {
                        String functionName = "set value";
                        setResultType(ExpressionType.LOGICAL_CONSTANT);
                        addArgument(new ArgumentDef("ArrayListDSL", functionName, "arrayList") {
                            {
                                setTypeReference("SemanticArrayList");
                                setArgumentType(ExpressionType.BASE_OBJECT);
                            }
                        });
                        addArgument(new ArgumentDef("ArrayListDSL", functionName, "idx") {
                            {
                                setArgumentType(ExpressionType.NUMERIC_CONSTANT);
                            }
                        });
                        addArgument(new ArgumentDef("ArrayListDSL", functionName, "val") {
                            {
                                setArgumentType(ExpressionType.STRING_CONSTANT);
                            }
                        });
                    }

                });
                getFunctions().add(new FunctionDef("ArrayListDSL", "size", null) {
                    {
                        String functionName = "size";
                        setResultType(ExpressionType.NUMERIC_CONSTANT);
                        addArgument(new ArgumentDef("ArrayListDSL", functionName, "arrayList") {
                            {
                                setArgumentType(ExpressionType.LIST);
                            }
                        });
                    }

                });
                getFunctions().add(new FunctionDef("ArrayListDSL", "containsString", null) {
                    {
                        String functionName = "containsString";
                        setResultType(ExpressionType.LOGICAL_CONSTANT);
                        addArgument(new ArgumentDef("ArrayListDSL", functionName, "arrayList") {
                            {
                                setTypeReference("SemanticArrayList");
                                setArgumentType(ExpressionType.BASE_OBJECT);
                            }
                        });
                        addArgument(new ArgumentDef("ArrayListDSL", functionName, "value") {
                            {
                                setArgumentType(ExpressionType.NUMERIC_CONSTANT);
                            }
                        });
                    }

                });
                getFunctions().add(new FunctionDef("ArrayListDSL", "asListOfStrings", null) {
                    {
                        String functionName = "asListOfStrings";
                        setResultType(ExpressionType.LIST);
                        addArgument(new ArgumentDef("ArrayListDSL", functionName, "arrayList") {
                            {
                                setTypeReference("SemanticArrayList");
                                setArgumentType(ExpressionType.BASE_OBJECT);
                            }
                        });
                    }

                });
                getFunctions().add(new FunctionDef("ArrayListDSL", "asListOfNumerics", null) {
                    {
                        String functionName = "asListOfNumerics";
                        setResultType(ExpressionType.LIST);
                        addArgument(new ArgumentDef("ArrayListDSL", functionName, "arrayList") {
                            {
                                setTypeReference("SemanticArrayList");
                                setArgumentType(ExpressionType.BASE_OBJECT);
                            }
                        });
                    }

                });
            }
        });
        return use;
    }
    public static Use use_c0() {
        Use use = new Use();
        use.setModelName("HashMapDSL");
        use.setClassName("com.gav.semanticGoogleSheets.HashMapDSL");
        use.setDomainModel(new DomainSpecificModel("HashMapDSL") {
            {
                getTypedefs().add(new Typedef("SemanticHashMap"));
                getFunctions().add(new FunctionDef("HashMapDSL", "create new semantic hashmap", null) {
                    {
                        String functionName = "create new semantic hashmap";
                        setResultType(ExpressionType.BASE_OBJECT);
                        setTypeReference("");
                    }

                });
                getFunctions().add(new FunctionDef("HashMapDSL", "get numeric value", null) {
                    {
                        String functionName = "get numeric value";
                        setResultType(ExpressionType.NUMERIC_CONSTANT);
                        addArgument(new ArgumentDef("HashMapDSL", functionName, "semanticHashMap") {
                            {
                                setTypeReference("SemanticHashMap");
                                setArgumentType(ExpressionType.BASE_OBJECT);
                            }
                        });
                        addArgument(new ArgumentDef("HashMapDSL", functionName, "key") {
                            {
                                setArgumentType(ExpressionType.STRING_CONSTANT);
                            }
                        });
                    }

                });
                getFunctions().add(new FunctionDef("HashMapDSL", "get string value", null) {
                    {
                        String functionName = "get string value";
                        setResultType(ExpressionType.STRING_CONSTANT);
                        addArgument(new ArgumentDef("HashMapDSL", functionName, "semanticHashMap") {
                            {
                                setTypeReference("SemanticHashMap");
                                setArgumentType(ExpressionType.BASE_OBJECT);
                            }
                        });
                        addArgument(new ArgumentDef("HashMapDSL", functionName, "key") {
                            {
                                setArgumentType(ExpressionType.STRING_CONSTANT);
                            }
                        });
                    }

                });
                getFunctions().add(new FunctionDef("HashMapDSL", "set numeric value", null) {
                    {
                        String functionName = "set numeric value";
                        setResultType(ExpressionType.LOGICAL_CONSTANT);
                        addArgument(new ArgumentDef("HashMapDSL", functionName, "semanticHashMap") {
                            {
                                setTypeReference("SemanticHashMap");
                                setArgumentType(ExpressionType.BASE_OBJECT);
                            }
                        });
                        addArgument(new ArgumentDef("HashMapDSL", functionName, "key") {
                            {
                                setArgumentType(ExpressionType.STRING_CONSTANT);
                            }
                        });
                        addArgument(new ArgumentDef("HashMapDSL", functionName, "value") {
                            {
                                setArgumentType(ExpressionType.NUMERIC_CONSTANT);
                            }
                        });
                    }

                });
                getFunctions().add(new FunctionDef("HashMapDSL", "set string value", null) {
                    {
                        String functionName = "set string value";
                        setResultType(ExpressionType.LOGICAL_CONSTANT);
                        addArgument(new ArgumentDef("HashMapDSL", functionName, "semanticHashMap") {
                            {
                                setTypeReference("SemanticHashMap");
                                setArgumentType(ExpressionType.BASE_OBJECT);
                            }
                        });
                        addArgument(new ArgumentDef("HashMapDSL", functionName, "key") {
                            {
                                setArgumentType(ExpressionType.STRING_CONSTANT);
                            }
                        });
                        addArgument(new ArgumentDef("HashMapDSL", functionName, "value") {
                            {
                                setArgumentType(ExpressionType.STRING_CONSTANT);
                            }
                        });
                    }

                });
                getFunctions().add(new FunctionDef("HashMapDSL", "print hashmaps", null) {
                    {
                        String functionName = "print hashmaps";
                        setResultType(ExpressionType.LOGICAL_CONSTANT);
                        addArgument(new ArgumentDef("HashMapDSL", functionName, "semanticHashMap") {
                            {
                                setTypeReference("SemanticHashMap");
                                setArgumentType(ExpressionType.BASE_OBJECT);
                            }
                        });
                    }

                });
            }
        });
        return use;
    }

    /**
     * Adds all global variables to Semantic Model
     */
    public static void addVariables(SemanticModel model) {
    }


    /**
     * Adds all rules to Semantic Model
     */
    public static void addRules(SemanticModel model) {
    }


    /**
     * Adds all predicates definitions to Semantic Model
     */
    public static void addPredicates(SemanticModel model) {
        model.addPredicateDef(predicate_e0_1());
        model.addPredicateDef(predicate_g0_1());
        model.addPredicateDef(predicate_i0_0());
        model.addPredicateDef(predicate_k0_0());
        model.addPredicateDef(predicate_m0_1());
        model.addPredicateDef(predicate_o0_0());
    }

    public static PredicateDef predicate_e0_1() {
        PredicateDef res = new PredicateDef("SemanticGoogleSheets", "make calculations for student", new And() {
            {
                addOperand(null);
                addOperand(null);
                addOperand(null);
                addOperand(new FunctionCall() {
                    {
                        setModelName("HashMapDSL");
                        setFunctionName("set numeric value");
                        addOperand(new ArgumentRef("SemanticGoogleSheets", "make calculations for student", "mean value storage"));
                        addOperand(new StringTerm("") {
                            {
                                getAdditions().add(new ArgumentRef("SemanticGoogleSheets", "make calculations for student", "student name"));
                                getAdditions().add(new StringConstant("markCount"));
                            }
                        });
                        addOperand(new VariableRef("mark count", "SemanticGoogleSheets"));
                    }
                });
                addOperand(new FunctionCall() {
                    {
                        setModelName("HashMapDSL");
                        setFunctionName("set numeric value");
                        addOperand(new ArgumentRef("SemanticGoogleSheets", "make calculations for student", "mean value storage"));
                        addOperand(new StringTerm("") {
                            {
                                getAdditions().add(new ArgumentRef("SemanticGoogleSheets", "make calculations for student", "student name"));
                                getAdditions().add(new StringConstant("markSum"));
                            }
                        });
                        addOperand(new VariableRef("mark sum", "SemanticGoogleSheets"));
                    }
                });
                addOperand(new FunctionCall() {
                    {
                        setModelName("HashMapDSL");
                        setFunctionName("set numeric value");
                        addOperand(new ArgumentRef("SemanticGoogleSheets", "make calculations for student", "mean value storage"));
                        addOperand(new StringTerm("") {
                            {
                                getAdditions().add(new ArgumentRef("SemanticGoogleSheets", "make calculations for student", "student name"));
                                getAdditions().add(new StringConstant("markMean"));
                            }
                        });
                        addOperand(new VariableRef("mark mean", "SemanticGoogleSheets"));
                    }
                });
            }
        }, new ArgumentDef("SemanticGoogleSheets", "make calculations for student", "student name") {
            {
                setArgumentType(ExpressionType.STRING_CONSTANT);
            }
        }, new ArgumentDef("SemanticGoogleSheets", "make calculations for student", "subject") {
            {
                setArgumentType(ExpressionType.STRING_CONSTANT);
            }
        }, new ArgumentDef("SemanticGoogleSheets", "make calculations for student", "mark") {
            {
                setArgumentType(ExpressionType.NUMERIC_CONSTANT);
            }
        }, new ArgumentDef("SemanticGoogleSheets", "make calculations for student", "mean value storage") {
            {
                setArgumentType(ExpressionType.BASE_OBJECT);
                setTypeReference("SemanticHashMap");
            }
        }) {
            {
                addLocalVariable(new VariableDef("mark sum before", new FunctionCall() {
                    {
                        setModelName("HashMapDSL");
                        setFunctionName("get numeric value");
                        addOperand(new ArgumentRef("SemanticGoogleSheets", "make calculations for student", "mean value storage"));
                        addOperand(new StringTerm("") {
                            {
                                getAdditions().add(new ArgumentRef("SemanticGoogleSheets", "make calculations for student", "student name"));
                                getAdditions().add(new StringConstant("markSum"));
                            }
                        });
                    }
                }));
                addLocalVariable(new VariableDef("mark count before", new FunctionCall() {
                    {
                        setModelName("HashMapDSL");
                        setFunctionName("get numeric value");
                        addOperand(new ArgumentRef("SemanticGoogleSheets", "make calculations for student", "mean value storage"));
                        addOperand(new StringTerm("") {
                            {
                                getAdditions().add(new ArgumentRef("SemanticGoogleSheets", "make calculations for student", "student name"));
                                getAdditions().add(new StringConstant("markCount"));
                            }
                        });
                    }
                }));
                addLocalVariable(new VariableDef("mark sum", new NumericTerm() {
                    {
                        addOperand(new ArgumentRef("SemanticGoogleSheets", "make calculations for student", "mark"));
                        addOperand(new VariableRef("mark sum before", "SemanticGoogleSheets"));
                        setOperation(NumericTerm.Operation.PLUS);
                    }
                }));
                addLocalVariable(new VariableDef("mark count", new NumericTerm() {
                    {
                        addOperand(new VariableRef("mark count before", "SemanticGoogleSheets"));
                        addOperand(new NumericConstant(new Double("1")));
                        setOperation(NumericTerm.Operation.PLUS);
                    }
                }));
                addLocalVariable(new VariableDef("mark mean", new NumericTerm() {
                    {
                        addOperand(new VariableRef("mark sum", "SemanticGoogleSheets"));
                        addOperand(new VariableRef("mark count", "SemanticGoogleSheets"));
                        setOperation(NumericTerm.Operation.DIVISION);
                    }
                }));
            }
        };
        return res;
    }
    public static PredicateDef predicate_g0_1() {
        PredicateDef res = new PredicateDef("SemanticGoogleSheets", "calc mean for a student in row when subject is math and store means", new And() {
            {
                addOperand(null);
                addOperand(new Implication(new Comparison() {
                    {
                        setOperation(Comparison.Operation.EQUAL);
                        setLeft(new VariableRef("subject", "SemanticGoogleSheets"));
                        setRight(new StringConstant("math"));
                    }
                }, new PredicateCall() {
                    {
                        setModelName("SemanticGoogleSheets");
                        setPredicateName("make calculations for student");
                        addOperand(new VariableRef("student name", "SemanticGoogleSheets"));
                        addOperand(new VariableRef("subject", "SemanticGoogleSheets"));
                        addOperand(new VariableRef("mark", "SemanticGoogleSheets"));
                        addOperand(new ArgumentRef("SemanticGoogleSheets", "calc mean for a student in row when subject is math and store means", "mean val storage"));
                    }
                }));
            }
        }, new ArgumentDef("SemanticGoogleSheets", "calc mean for a student in row when subject is math and store means", "rowArg") {
            {
            }
        }, new ArgumentDef("SemanticGoogleSheets", "calc mean for a student in row when subject is math and store means", "mean val storage") {
            {
                setArgumentType(ExpressionType.BASE_OBJECT);
                setTypeReference("SemanticHashMap");
            }
        }) {
            {
                addLocalVariable(new VariableDef("row", new ArgumentRef("SemanticGoogleSheets", "calc mean for a student in row when subject is math and store means", "rowArg")));
                addLocalVariable(new VariableDef("student name", new FunctionCall() {
                    {
                        setModelName("ArrayListDSL");
                        setFunctionName("get string");
                        addOperand(new VariableRef("row", "SemanticGoogleSheets"));
                        addOperand(new NumericConstant(new Double("0")));
                    }
                }));
                addLocalVariable(new VariableDef("subject", new FunctionCall() {
                    {
                        setModelName("ArrayListDSL");
                        setFunctionName("get string");
                        addOperand(new VariableRef("row", "SemanticGoogleSheets"));
                        addOperand(new NumericConstant(new Double("1")));
                    }
                }));
                addLocalVariable(new VariableDef("mark", new FunctionCall() {
                    {
                        setModelName("ArrayListDSL");
                        setFunctionName("get numeric");
                        addOperand(new VariableRef("row", "SemanticGoogleSheets"));
                        addOperand(new NumericConstant(new Double("2")));
                    }
                }));
            }
        };
        return res;
    }
    public static PredicateDef predicate_i0_0() {
        PredicateDef res = new PredicateDef("SemanticGoogleSheets", "add mean value to new table", new And() {
            {
                addOperand(new FunctionCall() {
                    {
                        setModelName("SemanticGoogleSheetsDSL");
                        setFunctionName("say");
                        addOperand(new StringTerm("parse ") {
                            {
                                getAdditions().add(new ArgumentRef("SemanticGoogleSheets", "add mean value to new table", "student name"));
                            }
                        });
                    }
                });
                addOperand(new FunctionCall() {
                    {
                        setModelName("ArrayListDSL");
                        setFunctionName("addString");
                        addOperand(new VariableRef("out row", "SemanticGoogleSheets"));
                        addOperand(new ArgumentRef("SemanticGoogleSheets", "add mean value to new table", "student name"));
                    }
                });
                addOperand(new FunctionCall() {
                    {
                        setModelName("ArrayListDSL");
                        setFunctionName("addNumeric");
                        addOperand(new VariableRef("out row", "SemanticGoogleSheets"));
                        addOperand(new ArgumentRef("SemanticGoogleSheets", "add mean value to new table", "mark mean"));
                    }
                });
                addOperand(null);
                addOperand(new FunctionCall() {
                    {
                        setModelName("ArrayListDSL");
                        setFunctionName("addList");
                        addOperand(new ArgumentRef("SemanticGoogleSheets", "add mean value to new table", "out range"));
                        addOperand(new VariableRef("out row", "SemanticGoogleSheets"));
                    }
                });
                addOperand(null);
                addOperand(new FunctionCall() {
                    {
                        setModelName("HashMapDSL");
                        setFunctionName("set string value");
                        addOperand(new ArgumentRef("SemanticGoogleSheets", "add mean value to new table", "mean value storage"));
                        addOperand(new StringTerm("") {
                            {
                                getAdditions().add(new ArgumentRef("SemanticGoogleSheets", "add mean value to new table", "student name"));
                                getAdditions().add(new StringConstant("parsed"));
                            }
                        });
                        addOperand(new StringConstant("true"));
                    }
                });
                addOperand(null);
                addOperand(new FunctionCall() {
                    {
                        setModelName("SemanticGoogleSheetsDSL");
                        setFunctionName("say");
                        addOperand(new ArgumentRef("SemanticGoogleSheets", "add mean value to new table", "out range"));
                    }
                });
            }
        }, new ArgumentDef("SemanticGoogleSheets", "add mean value to new table", "out range") {
            {
            }
        }, new ArgumentDef("SemanticGoogleSheets", "add mean value to new table", "student name") {
            {
                setArgumentType(ExpressionType.STRING_CONSTANT);
            }
        }, new ArgumentDef("SemanticGoogleSheets", "add mean value to new table", "mark mean") {
            {
                setArgumentType(ExpressionType.NUMERIC_CONSTANT);
            }
        }, new ArgumentDef("SemanticGoogleSheets", "add mean value to new table", "mean value storage") {
            {
                setArgumentType(ExpressionType.BASE_OBJECT);
                setTypeReference("SemanticHashMap");
            }
        }) {
            {
                addLocalVariable(new VariableDef("out row", new FunctionCall() {
                    {
                        setModelName("SemanticGoogleSheetsDSL");
                        setFunctionName("create row");
                        addOperand(new NumericConstant(new Double("2")));
                    }
                }));
            }
        };
        return res;
    }
    public static PredicateDef predicate_k0_0() {
        PredicateDef res = new PredicateDef("SemanticGoogleSheets", "save stored means in new instance of table", new And() {
            {
                addOperand(null);
                addOperand(new FunctionCall() {
                    {
                        setModelName("SemanticGoogleSheetsDSL");
                        setFunctionName("say");
                        addOperand(new StringTerm("Student name: ") {
                            {
                                getAdditions().add(new VariableRef("student name", "SemanticGoogleSheets"));
                            }
                        });
                    }
                });
                addOperand(new FunctionCall() {
                    {
                        setModelName("SemanticGoogleSheetsDSL");
                        setFunctionName("say");
                        addOperand(new StringTerm("mark mean") {
                            {
                                getAdditions().add(new VariableRef("mark mean", "SemanticGoogleSheets"));
                            }
                        });
                    }
                });
                addOperand(new FunctionCall() {
                    {
                        setModelName("SemanticGoogleSheetsDSL");
                        setFunctionName("say");
                        addOperand(new StringTerm("Parsed=") {
                            {
                                getAdditions().add(new VariableRef("parsed", "SemanticGoogleSheets"));
                            }
                        });
                    }
                });
                addOperand(null);
                addOperand(new Implication(new Not(new Parentheses(new Or() {
                    {
                        addOperand(new Comparison() {
                            {
                                setOperation(Comparison.Operation.EQUAL);
                                setLeft(new VariableRef("parsed", "SemanticGoogleSheets"));
                                setRight(new StringConstant("true"));
                            }
                        });
                        addOperand(new Comparison() {
                            {
                                setOperation(Comparison.Operation.EQUAL);
                                setLeft(new VariableRef("mark mean", "SemanticGoogleSheets"));
                                setRight(new NumericConstant(new Double("0")));
                            }
                        });

                    }
                })), new PredicateCall() {
                    {
                        setModelName("SemanticGoogleSheets");
                        setPredicateName("add mean value to new table");
                        addOperand(new ArgumentRef("SemanticGoogleSheets", "save stored means in new instance of table", "out range"));
                        addOperand(new VariableRef("student name", "SemanticGoogleSheets"));
                        addOperand(new VariableRef("mark mean", "SemanticGoogleSheets"));
                        addOperand(new ArgumentRef("SemanticGoogleSheets", "save stored means in new instance of table", "mean value storage"));
                    }
                }));
                addOperand(null);
                addOperand(new Implication(new And() {
                    {
                        addOperand(new Comparison() {
                            {
                                setOperation(Comparison.Operation.NOT_EQUAL);
                                setLeft(new VariableRef("parsed", "SemanticGoogleSheets"));
                                setRight(new StringConstant("true"));
                            }
                        });
                        addOperand(new Comparison() {
                            {
                                setOperation(Comparison.Operation.NOT_EQUAL);
                                setLeft(new VariableRef("mark mean", "SemanticGoogleSheets"));
                                setRight(new NumericConstant(new Double("0")));
                            }
                        });

                    }
                }, new FunctionCall() {
                    {
                        setModelName("SemanticGoogleSheetsDSL");
                        setFunctionName("say");
                        addOperand(new StringTerm("Add mean value for student: ") {
                            {
                                getAdditions().add(new VariableRef("student name", "SemanticGoogleSheets"));
                            }
                        });
                    }
                }));
                addOperand(null);
                addOperand(new FunctionCall() {
                    {
                        setModelName("HashMapDSL");
                        setFunctionName("print hashmaps");
                        addOperand(new ArgumentRef("SemanticGoogleSheets", "save stored means in new instance of table", "mean value storage"));
                    }
                });
            }
        }, new ArgumentDef("SemanticGoogleSheets", "save stored means in new instance of table", "rowArg") {
            {
            }
        }, new ArgumentDef("SemanticGoogleSheets", "save stored means in new instance of table", "out range") {
            {
            }
        }, new ArgumentDef("SemanticGoogleSheets", "save stored means in new instance of table", "mean value storage") {
            {
                setArgumentType(ExpressionType.BASE_OBJECT);
                setTypeReference("SemanticHashMap");
            }
        }) {
            {
                addLocalVariable(new VariableDef("row", new ArgumentRef("SemanticGoogleSheets", "save stored means in new instance of table", "rowArg")));
                addLocalVariable(new VariableDef("student name", new FunctionCall() {
                    {
                        setModelName("ArrayListDSL");
                        setFunctionName("get string");
                        addOperand(new VariableRef("row", "SemanticGoogleSheets"));
                        addOperand(new NumericConstant(new Double("0")));
                    }
                }));
                addLocalVariable(new VariableDef("mark mean", new FunctionCall() {
                    {
                        setModelName("HashMapDSL");
                        setFunctionName("get numeric value");
                        addOperand(new ArgumentRef("SemanticGoogleSheets", "save stored means in new instance of table", "mean value storage"));
                        addOperand(new StringTerm("") {
                            {
                                getAdditions().add(new VariableRef("student name", "SemanticGoogleSheets"));
                                getAdditions().add(new StringConstant("markMean"));
                            }
                        });
                    }
                }));
                addLocalVariable(new VariableDef("parsed", new FunctionCall() {
                    {
                        setModelName("HashMapDSL");
                        setFunctionName("get string value");
                        addOperand(new ArgumentRef("SemanticGoogleSheets", "save stored means in new instance of table", "mean value storage"));
                        addOperand(new StringTerm("") {
                            {
                                getAdditions().add(new VariableRef("student name", "SemanticGoogleSheets"));
                                getAdditions().add(new StringConstant("parsed"));
                            }
                        });
                    }
                }));
            }
        };
        return res;
    }
    public static PredicateDef predicate_m0_1() {
        PredicateDef res = new PredicateDef("SemanticGoogleSheets", "parse google sheet", new And() {
            {
                addOperand(null);
                addOperand(null);
                addOperand(new ForAll(new VariableRef("range", "SemanticGoogleSheets"), new PredicateCall() {
                    {
                        setModelName("SemanticGoogleSheets");
                        setPredicateName("calc mean for a student in row when subject is math and store means");
                        addOperand(new RangeRef("row"));
                        addOperand(new VariableRef("mean value storage", "SemanticGoogleSheets"));
                    }
                }) {
                    {
                        add(new Range("row"));
                    }
                });
                addOperand(null);
                addOperand(new ForAll(new VariableRef("range", "SemanticGoogleSheets"), new PredicateCall() {
                    {
                        setModelName("SemanticGoogleSheets");
                        setPredicateName("save stored means in new instance of table");
                        addOperand(new RangeRef("row"));
                        addOperand(new VariableRef("new table", "SemanticGoogleSheets"));
                        addOperand(new VariableRef("mean value storage", "SemanticGoogleSheets"));
                    }
                }) {
                    {
                        add(new Range("row"));
                    }
                });
                addOperand(null);
                addOperand(new FunctionCall() {
                    {
                        setModelName("SemanticGoogleSheetsDSL");
                        setFunctionName("write table");
                        addOperand(new StringConstant("Sheet2!A2"));
                        addOperand(new VariableRef("new table", "SemanticGoogleSheets"));
                    }
                });
            }
        }) {
            {
                addLocalVariable(new VariableDef("range", new FunctionCall() {
                    {
                        setModelName("SemanticGoogleSheetsDSL");
                        setFunctionName("get range as list of lists");
                        addOperand(new StringConstant("Sheet1!A2:H"));
                    }
                }));
                addLocalVariable(new VariableDef("rowCount", new FunctionCall() {
                    {
                        setModelName("ArrayListDSL");
                        setFunctionName("size");
                        addOperand(new VariableRef("range", "SemanticGoogleSheets"));
                    }
                }));
                addLocalVariable(new VariableDef("new table", new FunctionCall() {
                    {
                        setModelName("SemanticGoogleSheetsDSL");
                        setFunctionName("create range");
                        addOperand(new VariableRef("rowCount", "SemanticGoogleSheets"));
                    }
                }));
                addLocalVariable(new VariableDef("mean value storage", new FunctionCall() {
                    {
                        setModelName("HashMapDSL");
                        setFunctionName("create new semantic hashmap");
                    }
                }));
            }
        };
        return res;
    }
    public static PredicateDef predicate_o0_0() {
        PredicateDef res = new PredicateDef("SemanticGoogleSheets", "start", new And() {
            {
                addOperand(new FunctionCall() {
                    {
                        setModelName("SemanticGoogleSheetsDSL");
                        setFunctionName("start");
                        addOperand(new StringConstant("1Yx0qD-8Adz3ptzbOW8wQaVlb8Ru5xfprzuJ1uzF85SA"));
                        addOperand(new StringConstant("D:\\passwords\\google_key\\MiniappsTesterBot-e3f1e1953eda.json"));
                    }
                });
                addOperand(new PredicateCall() {
                    {
                        setModelName("SemanticGoogleSheets");
                        setPredicateName("parse google sheet");
                    }
                });
            }
        }) {
            {
            }
        };
        return res;
    }

    public static void main(String[] args) {
        // Runing start() predicate if it exists
        LocalSemanticRegistry registry = new LocalSemanticRegistry();
        try {
            ModelDescriptor md = registry.register(model);
            LocalSemanticMachine machine = (LocalSemanticMachine) registry.getSemanticMachine(md);

            machine.loadBaseLibrary("com.gav.semanticGoogleSheets.SemanticGoogleSheetsDSL");
            machine.loadBaseLibrary("com.gav.semanticGoogleSheets.ArrayListDSL");
            machine.loadBaseLibrary("com.gav.semanticGoogleSheets.HashMapDSL");

            PredicateDescriptor[] predicates = machine.getPredicatesList();
            PredicateDescriptor start = null;
            for (PredicateDescriptor pdesc : predicates) {
                System.out.println(pdesc);
                if (pdesc.getPredicateName().equals("start")) {
                    start = pdesc;
                }
            }
            if (start != null) {
                System.out.println(machine.callPredicate("start"));
            }
        } catch (SemanticException ex) {
            ex.printStackTrace();
        }


    }

    @Override
    public SemanticModel getSemanticModel() {
        return getModel();
    }
    @Override
    public String getModelName() {
        return getName();
    }
}
